configure_file("${CMAKE_CURRENT_SOURCE_DIR}/ctrlib.pxd" "${CMAKE_CURRENT_BINARY_DIR}/ctrlib.pxd")
configure_file("${CMAKE_CURRENT_SOURCE_DIR}/trlib.pyx"  ${CMAKE_CURRENT_BINARY_DIR})

foreach(PY_VER "2" "3")
    unset(PYTHON_EXECUTABLE CACHE)
    unset(PYTHON_INCLUDE_DIR CACHE)
    unset(PYTHON_LIBRARY CACHE)
    unset(PYTHON_LIBRARY_DEBUG CACHE)
    if( (PY_VER EQUAL "2" AND TRLIB_BUILD_PYTHON2) OR (PY_VER EQUAL "3" AND TRLIB_BUILD_PYTHON3) )
        unset(CYTHON)
        find_package(PythonInterp ${PY_VER} EXACT)
        if(PYTHONINTERP_FOUND)
            find_package(PythonLibs ${PY_VER} EXACT)
            set(CYTHON "cython")
            if(PY_VER EQUAL "2")
                execute_process(COMMAND ${PYTHON_EXECUTABLE} -c "import distutils.sysconfig; print(distutils.sysconfig.get_config_vars()['SO'])" OUTPUT_VARIABLE PY_SO)
            elseif(PY_VER EQUAL "3")
                execute_process(COMMAND ${PYTHON_EXECUTABLE} -c "import distutils.sysconfig; print(distutils.sysconfig.get_config_vars()['EXT_SUFFIX'])" OUTPUT_VARIABLE PY_SO)
            endif(PY_VER EQUAL "2")
            string(STRIP ${PY_SO} PY_SO)

            execute_process(COMMAND ${PYTHON_EXECUTABLE} -c "import sys, numpy; sys.stdout.write(numpy.get_include())" OUTPUT_VARIABLE NUMPY_INCLUDE_PATH)
            
	        add_custom_target("pytrlib${PY_VER}" ALL DEPENDS "_trlib${PY_VER}.c")
            add_custom_command(OUTPUT "_trlib${PY_VER}.c" COMMAND ${CYTHON} trlib.pyx -o "_trlib${PY_VER}.c" DEPENDS trlib.pyx "${CMAKE_CURRENT_BINARY_DIR}/ctrlib.pxd")
            add_library("_trlib${PY_VER}" SHARED "_trlib${PY_VER}.c")
            target_include_directories("_trlib${PY_VER}" PRIVATE ${PYTHON_INCLUDE_PATH} ${NUMPY_INCLUDE_PATH})
            target_link_libraries("_trlib${PY_VER}" trlib ${LIBS} ${PYTHON_LIBRARIES} ${LAPACK_LIBRARIES} ${BLAS_LIBRARIES})
            install(FILES "${CMAKE_CURRENT_BINARY_DIR}/lib_trlib${PY_VER}${CMAKE_SHARED_LIBRARY_SUFFIX}" DESTINATION ${PROJECT_BINARY_DIR} RENAME trlib${PY_SO})
        endif(PYTHONINTERP_FOUND)
    endif( (PY_VER EQUAL "2" AND TRLIB_BUILD_PYTHON2) OR (PY_VER EQUAL "3" AND TRLIB_BUILD_PYTHON3) )
endforeach(PY_VER)
